pipeline {
    agent any

   
    stages {
        stage('Checkout') {
            steps {
                // Étape de checkout : récupération du code depuis Git
                git 'https://github.com/DevAzizHub/projetdevopsbackend.git'
            }
        }

        stage('Compilation avec Maven') {
            steps {
                // Étape de compilation avec Maven
                sh 'mvn clean compile'
            }
        }

        stage('JUnit / Mockito') {
            steps {
              sh 'mvn test'
            }
        }

           stage('Rapport JaCoCo') {
            steps {
                sh 'mvn test'
               // sh 'mvn jacoco:report'
               jacoco()
            }
        }
        stage('JaCoCo coverage report') {
            steps {
                step([$class: 'JacocoPublisher',
                      execPattern: '**/target/jacoco.exec',
                      classPattern: '**/classes',
                      sourcePattern: '**/src',
                      exclusionPattern: '*/target/**/,**/*Test*,**/*_javassist/**'
                ])
            }
        }
      stage('MVN install') {
            steps {
              sh 'mvn package install'
            }
        }
     //   stage('SonarQube Analysis') {
           
       //         steps {


        //                withSonarQubeEnv('sonarqube') {
                      
           //               sh "mvn verify sonar:sonar -Dsonar.login=admin -Dsonar.password=root"
             //             }

             //         }
             //     }
       
           stage("sonar_quality_check"){
            steps{
                script{
                    withSonarQubeEnv(credentialsId: 'adafa76b-6205-41ed-9149-55f48920347e') {
                      sh "mvn sonar:sonar"
                    }

                     timeout(time: 1, unit: 'HOURS') {
                      def qg = waitForQualityGate()
                      if (qg.status != 'OK') {
                           error "Pipeline aborted due to quality gate failure: ${qg.status}"
                      }
                    }
                }
            }
          
        }    
            
        

        stage('Affichage de la date système') {
            steps {
                // Étape pour afficher la date système
                script {
                    def date = sh(script: 'date', returnStdout: true).trim()
                    println "Date système : ${date}"
                }
            }
        }
    }
}
