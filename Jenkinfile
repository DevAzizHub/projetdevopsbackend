pipeline {
    agent any
 environment {
        PATH = "$PATH:/opt/maven/bin"
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "10.0.2.15:8081"
        NEXUS_REPOSITORY = "jenkins-repo"
        NEXUS_CREDENTIAL_ID = "deploymentRepo"
       // DOCKERHUB_CREDENTIALS = credentials('dockerhub')
	DOCKER_USERNAME = "dockerfilehunter"
   	DOCKER_REGISTRY = ''
        DOCKER_IMAGE_NAME = 'achatproject'
        DOCKER_IMAGE_TAG = 'latest'
    }
   
    stages {
        stage('Checkout') {
            steps {
                // Étape de checkout : récupération du code depuis Git
                git 'https://github.com/DevAzizHub/projetdevopsbackend.git'
            }
        }

 stage('Increment Version'){
             steps{
                 script{
                    echo 'Incrementing Artifact Version ...'
                    sh 'mvn build-helper:parse-version versions:set \
                        -DnewVersion=\\\${parsedVersion.majorVersion}.\\\${parsedVersion.minorVersion}.\\\${parsedVersion.nextIncrementalVersion} \
                        versions:commit'
                    def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
                    def version = matcher[1][1]
                    echo '$version'
                    env.VERSION = "$version"
                 }
             }
         }

        stage('Compilation avec Maven') {
            steps {
                // Étape de compilation avec Maven
                sh 'mvn clean compile'
            }
        }

        stage('JUnit / Mockito') {
            steps {
              sh 'mvn test'
            }
        }


        
      stage('MVN install') {
            steps {
              sh 'mvn package install'
            }
        }
        stage('SonarQube Analysis') {
           
                steps {

                script{
                       withSonarQubeEnv(credentialsId: 'sonar-api-key') {
                      
                          sh "mvn clean package sonar:sonar -Dsonar.login=admin -Dsonar.password=root"
                          }

                      }

                  }
}       
 stage('Nexus'){
            steps{
                sh 'mvn deploy -DskipTests'
            }
        }
stage('Docker image build'){ 
	steps {
		script {
			sh 'docker image build -t   dockerfilehunter/achatproject .'
			//sh "sudo docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."

              
		}

	}


}

     stage("Push to DockerHub") { 
    steps { 
        script {
              sh 'docker image push dockerfilehunter/achatproject'
            
        }
    } 
}


            
        



        stage('Affichage de la date système') {
            steps {
                // Étape pour afficher la date système
                script {
                    def date = sh(script: 'date', returnStdout: true).trim()
                    println "Date système : ${date}"
                }
            }
        }
    }
}
