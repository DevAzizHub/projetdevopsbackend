pipeline {
    agent any
 environment {
        PATH = "$PATH:/opt/maven/bin"
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "10.0.2.15:8081"
        NEXUS_REPOSITORY = "jenkins-repo"
        NEXUS_CREDENTIAL_ID = "deploymentRepo"
       // DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    }
   
    stages {
        stage('Checkout') {
            steps {
                // Étape de checkout : récupération du code depuis Git
                git 'https://github.com/DevAzizHub/projetdevopsbackend.git'
            }
        }

        stage('Compilation avec Maven') {
            steps {
                // Étape de compilation avec Maven
                sh 'mvn clean compile'
            }
        }

        stage('JUnit / Mockito') {
            steps {
              sh 'mvn test'
            }
        }

           stage('Rapport JaCoCo') {
            steps {
                sh 'mvn test'
               sh 'mvn jacoco:report'
               jacoco()
            }
        }
        
      stage('MVN install') {
            steps {
              sh 'mvn package install'
            }
        }
        stage('SonarQube Analysis') {
           
                steps {

                script{
                       withSonarQubeEnv(credentialsId: 'sonar-api-key') {
                      
                          sh "mvn clean package sonar:sonar -Dsonar.login=admin -Dsonar.password=root"
                          }

                      }
                  }
       
          
        stage("sonar_quality_check"){
            steps{
                script{
                 waitForQualityGate abortPipeline: false, credentialsId: 'sonar-api-key'
               }
              }

		}


          // stage("sonar_quality_check"){
          //  steps{
              
            
         stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "* File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "* File: ${artifactPath}, could not be found";
                    }
                }
            }
        }

        stage('Affichage de la date système') {
            steps {
                // Étape pour afficher la date système
                script {
                    def date = sh(script: 'date', returnStdout: true).trim()
                    println "Date système : ${date}"
                }
            }
        }
    }
}
